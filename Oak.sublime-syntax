%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Oak
file_extensions: [ oak ]
scope: source.oak

variables:
  keywords: '(true|false|null|bool|namespace|import|struct|trait|function|return|enum|ignore|implement|self|mut|public|inline|init|drop|if|else|while|do|for|match|break|loop|bind|const|require|where|alias)'
  keywords_fr: '(vrai|faux|nul|bool|espacenom|importer|struct|trait|fonction|rendre|énum|ignorer|réaliser|soi|mut|public|enligne|init|baisser|si|autre|alors|faire|pour|identifier|quitter|boucle|lier|const|faut|ou|alias)'
  identifier: '(?:[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+)'
  int_suffixes: '(?:i8|i16|i32|i64|iptr|u8|u16|u32|u64|uptr|i|u)'
  builtin_types: '(?:i8|i16|i32|i64|iptr|u8|u16|u32|u64|uptr|f32|f64|bool|char|str|str16|str32|void|array)'
  builtin_types_fr: '(vide)'

contexts:
  main:
    
    - match: \/\*[^(\*\/)]*
      push: block_comment
      
    - match: \/\/[^\n]*
      scope: comment.line.double-slash.oak
      
    - match: \b{{keywords}}|{{keywords_fr}}\b
      scope: keyword.control.oak
      
    - match: \b{{builtin_types}}|{{builtin_types_fr}}\b
      scope: storage.type.oak
      
    - match: \btrue|false|null\b
      scope: constant.language.oak
      
    - match: \b{{identifier}}\b
      scope: identifier.language.oak
      
    - match: \b(?:(?:(?:[0-9][0-9_]*)(?:\.[0-9][0-9_]*)?)(?:(?:e[\+\-]?[0-9][0-9_]*(?:f32|f64|f))|(?:f32|f64|f)))|(?:0x[0-9a-fA-F][0-9A-Fa-f_]*p[\+\-]?[0-9][0-9_]*(?:f32|f64|f)?)|(?:(?:(?:0[oO][0-7][0-7_]*)|(?:0[bB][01][01_]*)|(?:0[xXhH][a-fA-F0-9][a-fA-F0-9_]*)|(?:[0-9][0-9_]*))(?:(?:(?:u|i)(?:8|16|32|64|ptr)?))?)|(?:\.(?:[0-9][0-9_]*)(?:e[\+\-]?[0-9][0-9_]*)?(?:f32|f64)?)\b
      scope: constant.language.oak
      
    - match: \b`{{identifier}}
      scope: label.oak
      
    - match: '"'
      push: string
      
    - match: ''''
      push: char
      
  string:
    - meta_scope: string.double.quoted.oak
    - match: '"(?:u8|u16|u32)?'
      pop: true
      
  char:
    - meta_scope: constant.character.oak
    - match: ''''
      pop: true
      
  block_comment:
    - meta_scope: comment.block.oak
    - match: \*\/
      pop: true

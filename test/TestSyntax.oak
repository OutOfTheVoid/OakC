
// Working
import "Other.oak";

namespace MyNamespace::MySubNamespace
{
	
	struct MyNamespacedStruct
	{
		
		bind Yay:u32,
		
	}
	
	namespace SubSubNamespace
	{
		
		/*struct MySubSubNamespaceStruct
		{
			
			bind SomeBinding:f64
			
		}*/
		
	}
	
}

function MyGlobalFunc ( SomeParam : i32 ) : void
{
	
	ignore SomeParam;
	
}

struct MyType <A, B: SomeNamespace::SomeNamespacedTrait <A>>
{
	
	bind TestString: string,
	bind TestInt: MyNamespace :: MySubNamespace :: MyNamespacedType <A>,
	bind TestTempalted: Array<Array<Array<B>>>,
	
}

implement MyType
{
	
	function Test <A, B: SomeTrait <A>> ( & self, StringValue: & string ): u32
	{
		
		/*self -> TestString = StringValue;
		self -> TestInt = 0;*/
		
	}
	
	/*
	function drop ( self )
	{
		
		delete self -> TestString;
		
	}
	
	function SayHello ( & self )
	{
		
		Std::IO :: Print ( self -> TestString + ", " + String::ToString ( TestInt ) );
		
	}*/
	
}

function Main ( ProgramArguments: Array <string> )
{
	
	ignore ProgramArguments;
	
	/*bind MyString: string = "Hello, world!";
	bind MyStruct: MyType = MyType ( MyString.copy () );
	
	MyType.SayHello ();*/
	
}


// Working
import "Other.oak";

// Works, doesn't allow for template specified nor namespaced traits yet, but working on it.
struct MyType <A, B: SomeNamespace::SomeNamespacedTrait <A>>
{
	
	bind TestString: string,
	bind TestInt: MyNamespace :: MySubNamespace :: MyNamespacedType <A>,
	bind TestTempalted: Array<Array<Array<B>>>,
	
}

namespace MyNamespace::MySubNamespace
{
	
	struct MyNamespacedStruct
	{
		
		bind Yay:u32,
		
	}
	
	namespace SubSubNamespace
	{
		
		/*struct MySubSubNamespaceStruct
		{
			
			bind SomeBinding:f64
			
		}*/
		
	}
	
}

implement MyType
{
	
	function Test <A, B: SomeTrait <A>> ( * self, StringValue: * string ): u32
	{
		
		/*self -> TestString = StringValue;
		self -> TestInt = 0;*/
		
	}
	
	/*
	function drop ( * self )
	{
		
		delete self -> TestString;
		
	}
	
	function SayHello ( * self )
	{
		
		Std::IO :: Print ( self -> TestString + ", " + String::ToString ( TestInt ) );
		
	}*/
	
}
/*
function Main ( ProgramArguments: & array <string> )
{
	
	ignore ProgramArguments;
	
	MyString: string = "Hello, world!";
	MyStruct: MyType ( MyString.copy () );
	
	MyType.SayHello ();
	
}*/

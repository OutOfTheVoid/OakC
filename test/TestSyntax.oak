//import "test/TestSyntax_Literals.oak";

trait Cast <TO_T>
{
	
	function cast ( & self ): TO_T
	
}

struct MyType
{
}

implement MyType for Cast:<i32>
{
	
	function cast ( & self ): i32
	{
		
		return 0;
		
	}
	
}

implement MyType for Cast:<u64>
{
	
	function cast ( & self ): u64
	{
		
		return 1;
		
	}
	
}

function TestCastSyntax (): void
{
	
	bind a: MyType;
	
	a@Cast:<i32>.cast ();
	
}

/*function Main ( ProgramArguments: Array:<str> ) : i32
{
	
	ignore ProgramArguments;
	
	bind MyString: str = "Hello, world!";
	
	bind MyArray: Array : <u32> = [:u32; 0u32, 1_u32, 2, 3, 4, 5, 6 ];
	
	bind comp:u32 = 0;
	
	if ( comp <= 2 )
	{
		
		print ( "a" );
		
	}
	else if ( comp <= 4 )
	{
		
		print ( "b" );
		
	}
	else
	{
		
		print ( "c" );
		
	}
	
	return 0;
	
}*/

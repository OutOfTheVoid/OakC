// WHOOOOO! THIS CAN ALL BE PARSED NOW!

import "test/TestSyntax_Literals.oak";

namespace MyNamespace::MySubNamespace
{
	
	struct MyNamespacedStruct
	{
		
		bind Yay:u32,
		
	}
	
	namespace SubSubNamespace
	{
		
		struct MySubSubNamespaceStruct
		{
			
			bind SomeBinding:f64
			
		}
		
	}
	
}

function MyGlobalFunc ( SomeParam : i32 ) : void
{
	
	SomeNamespace::SomeTemplatedClass:<u32>.Call ();
	
}

struct MyType <A, B>
{
	
	bind TestString: string,
	bind TestInt: MyNamespace :: MySubNamespace :: MyNamespacedType:<A>,
	bind TestTempalted: Array:<Array:<Array:<B>>>,
	bind TestTemplated: Array:<Array:<Array:<A>>>
	
}

implement MyType
{
	
	function Test ( & self, StringValue: & string ): u32
	{
		
		self -> TestString = StringValue;
		self -> TestInt = 0;
		
	}
	
	function SayHello ( & self )
	{
		
		Std::IO :: Print ( self -> TestString + ", " + String::ToString ( TestInt ) );
		
	}
	
}

function Main ( ProgramArguments: Array:<string> ) : i32
{
	
	ignore ProgramArguments;
	
	bind MyString: string = "Hello, world!";
	bind MyStruct: MyType = MyType ( MyString.copy () );
	
	bind MyArray: Array : <u32> = [:u32; 0, 1, 2, 3, 4, 5, 6 ];
	
	MyType.SayHello ();
	
	return 0;
	
}

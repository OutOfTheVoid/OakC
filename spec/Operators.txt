Operators
=========

Precedence here determines which operators are first to be transformed into simples for other operators in a complex (multi-operator) statement.

Associativity here means whether the operator groups left vs right.


Operator | Name                 | Precedence | Associativity | Form
=============================================================================================
=============================================================================================
::       | Scope resolution     | 0          | None          | <Scope> :: <Sub-element>
=============================================================================================
=============================================================================================
.        | Direct member access | 1          | Left          | <Expr>.<Member>
---------------------------------------------------------------------------------------------
->       | Indir. member access | 1          | Left          | <[*|&] Expr> -> <Member>
---------------------------------------------------------------------------------------------
[]       | Array subscript      | 1          | Left          | <Expr> [ <Expr> ]
---------------------------------------------------------------------------------------------
()       | Function call        | 1          | Left          | <Expr> ()
---------------------------------------------------------------------------------------------
++       | Postfix increment    | 1          | Left          | <Expr> ++
---------------------------------------------------------------------------------------------
--       | Postfix decrement    | 1          | Left          | <Expr> --
=============================================================================================
=============================================================================================
++       | Prefix increment     | 2          | Right         | ++ <Expr>
---------------------------------------------------------------------------------------------
--       | Prefix decrement     | 2          | Right         | -- <Expr>
---------------------------------------------------------------------------------------------
~        | Bitwise not          | 2          | Right         | ~ <Expr>
---------------------------------------------------------------------------------------------
!        | Logical not          | 2          | Right         | ! <Expr>
---------------------------------------------------------------------------------------------
-        | Unary negation       | 2          | Right         | - <Expr>
---------------------------------------------------------------------------------------------
+        | Unary positive       | 2          | Right         | + <Expr>
---------------------------------------------------------------------------------------------
&        | Address of/Reference | 2          | Right         | & <& Expr>
---------------------------------------------------------------------------------------------
*        | Pointer indirection  | 2          | Right         | * <* Expr>
=============================================================================================
=============================================================================================
*        | Multiplication       | 3          | Left -> Right | <Expr> * <Expr>
---------------------------------------------------------------------------------------------
/        | Division             | 3          | Left -> Right | <Expr> / <Expr>
---------------------------------------------------------------------------------------------
%        | Modulus              | 3          | Left -> Right | <Expr> % <Expr>
=============================================================================================
=============================================================================================
+        | Addition             | 4          | Left -> Right | <Expr> + <Expr>
---------------------------------------------------------------------------------------------
-        | Subtraction          | 4          | Left -> Right | <Expr> - <Expr>
=============================================================================================
=============================================================================================
<<       | Left shift           | 5          | Left -> Right | <Expr> << <Expr>
---------------------------------------------------------------------------------------------
>>       | Right shift          | 5          | Left -> Right | <Expr> >> <Expr>
=============================================================================================
=============================================================================================
>        | Greater than         | 6          | Left -> Right | <Expr> > <Expr>
---------------------------------------------------------------------------------------------
<        | Less than            | 6          | Left -> Right | <Expr> < <Expr>
---------------------------------------------------------------------------------------------
>=       | Greater than/Equal   | 6          | Left -> Right | <Expr> >= <Expr>
---------------------------------------------------------------------------------------------
<=       | Less than/Equal      | 6          | Left -> Right | <Expr> <= <Expr>
=============================================================================================
=============================================================================================
!=       | Not eq. / Logic xor  | 7          | Left -> Right | <Expr> != <Expr>
---------------------------------------------------------------------------------------------
==       | Equal                | 7          | Left -> Right | <Expr> == <Expr>
=============================================================================================
=============================================================================================
&        | Bitwise and          | 8          | Left -> Right | <Expr> & <Expr>
=============================================================================================
=============================================================================================
^        | Bitwise xor          | 9          | Left -> Right | <Expr> ^ <Expr>
=============================================================================================
=============================================================================================
|        | Bitwise or           | 10         | Left -> Right | <Expr> | <Expr>
=============================================================================================
=============================================================================================
&&       | Logical and          | 11         | Left -> Right | <Expr> && <Expr>
=============================================================================================
=============================================================================================
||       | Logical or           | 12         | Right -> Left | <Expr> || <Expr>
=============================================================================================
=============================================================================================
? :      | Ternary condition    | 13         | Right -> Left | <Expr> ? <Expr> : <Expr>
=============================================================================================
=============================================================================================
=        | Assignment           | 14         | Right -> Left | <Binding> = <Expr>
---------------------------------------------------------------------------------------------
*=       | Compound Multiply    | 14         | Right -> Left | <Binding> *= <Expr>
---------------------------------------------------------------------------------------------
/=       | Compound Divide      | 14         | Right -> Left | <Binding> /= <Expr>
---------------------------------------------------------------------------------------------
%=       | Compound Modulus     | 14         | Right -> Left | <Binding> %= <Expr>
---------------------------------------------------------------------------------------------
+=       | Compound Addition    | 14         | Right -> Left | <Binding> += <Expr>
---------------------------------------------------------------------------------------------
-=       | Compound Subtraction | 14         | Right -> Left | <Binding> -= <Expr>
---------------------------------------------------------------------------------------------
<<=      | Compound Left Shift  | 14         | Right -> Left | <Binding> <<= <Expr>
---------------------------------------------------------------------------------------------
>>=      | Compound Right Shift | 14         | Right -> Left | <Binding> >>= <Expr>
---------------------------------------------------------------------------------------------
&=       | Compound Bitw. and   | 14         | Right -> Left | <Binding> &= <Expr>
---------------------------------------------------------------------------------------------
|=       | Compound Bitw. or    | 14         | Right -> Left | <Binding> |= <Expr>
---------------------------------------------------------------------------------------------
^=       | Compound Bitw. xor   | 14         | Right -> Left | <Binding> ^= <Expr>

